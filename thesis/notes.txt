Functional Programming:
    pure functions
    first class citizens
    higher order functions
    folds
    currying
    recursion
    immutable*
    lazy evaluation
    Haskell Curry was Hilbert's student
    lambda calculus: no state
    turing machine: state

Types and Kinds:
    constructors
    typeclasses
    simply typed lambda calculus
    System FC
    extensions
    DataKinds
    GADTS
    Nat
    only 1 sort*
    statically typed
    type level code is evaluated at compile time
    term level code is evaluated at runtime
    turning a runtime error into a compile time error is a win

Functors and Monads:
    functor is * -> * kind
    functor laws
    maybe functor
    Hask
    applicative
    maybe applicative
    monad laws
    maybe monad
    join
    laws with join
    maybe join
    diagrams
    examples other than Maybe

Algorithms:
    stateless*
    Bonus benefit: the weirdness with = vs := vs == goes away.*

Conclusion:
    Future options*
    Quantum Computing?*
    Facebook Spam filter?*
