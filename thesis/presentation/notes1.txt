title:
    thank everyone, especially dr. turkett
    the reason i asked dr. turkett...
    for the past year...
    define CAS
    it should come as no surprise...

linguistics

why?
    Why is my cas different?
    programming languages and design philosophies
    a paradigm for how one approaches software design
    functional means "real" functions
    something that proceedural and oop have in common is imperative
    another language (math)

polynomials
    become even more useful when we generalize them
    total degree of monomial
    combination of indeterminates (CFM)
    lead term taken for granted
    example of an ideal (<x^2>?)
    explain Grobner bases more simply.
    lead term of any element of I is divisible by the lead term of some g.
    remainder is sometimes called the normal form
    explain why we need S-polynomials right after normal form def (buchberger's)

categories
    important in modern mathematics
    some say it is overly abstract and useless
    common in math to care more about maps than objects
    diagram chasing

functional programming
    Haskell syntax / pure functions
    currying / first class citizens
    mention higher order functions like folds
    no temporal constraints => lazy eval / infinite lists
    recursion / lambda calculus (type system is the difference)
    types
    there's something about Maybe / (* -> *)
    type of a type / scroll back up after show / datakinds
