Functional Programming:
    pure functions*
    first class citizens
    currying*
    example of map
    higher order functions like folds
    lazy evaluation
    recursion*
    Haskell Curry was Hilbert's student
    lambda calculus: no state
    turing machine: state

Types and Kinds:
    constructors
    typeclasses
    extensions
    DataKinds
    GADTS
    Nat
    only 1 sort
    statically typed
    type level code is evaluated at compile time <- maybe start here
    term level code is evaluated at runtime
    turning a runtime error into a compile time error is a win

Functors and Monads:
    functor is * -> * kind
    functor laws
    maybe functor
    Hask
    applicative
    maybe applicative
    monad laws
    maybe monad
    join
    laws with join
    maybe join
    diagrams
    examples other than Maybe

polynomial-algorithms:
    Coef: Num, Fractional
    Mon: Ord, Semigroup, Monoid
    Poly: Num, polyMult, sPoly

Algorithms:
    stateless

Conclusion:
    Future options
    Quantum Computing?
    Facebook Spam filter?
